{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","data","react_default","a","createElement","className","src","photo","alt","name","App","state","sun","mon","tue","wed","thu","fri","sat","_this2","this","match","moment","defaultFormat","alert","axios","get","then","response","thisSunday","day","month","dateDay","date","console","log","forEach","e","eDate","birthday","dmy","year","eMonth","eDateDate","setState","Object","toConsumableArray","concat","width","map","el","i","App_Card","assign","key","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2f948f58.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport moment from 'moment';\nimport axios from \"axios\";\n\nconst Card = (data) => {\n  \n  return (\n    <div className=\"card\">\n      <img src={data.photo} alt={data.name} className=\"card-img-top\" />\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">{data.name}</h5>\n      </div>\n    </div>\n  )\n}\n\nclass App extends Component {\n  state = {\n    sun: [],\n    mon: [],\n    tue: [],\n    wed: [],\n    thu: [],\n    fri: [],\n    sat: [],\n  };\n\n  componentDidMount() {\n    let match = false;\n    moment.defaultFormat = \"DD/MM/YYYY\";\n    alert(\"Fetch API\");\n    axios.get('http://uinames.com/api/?ext&amount=200')\n    //  .then(response => )\n      .then(response => {\n        let data = response.data;\n        alert(\"Fetch Completed.\");\n        let thisSunday = moment().day(0);\n        let month = thisSunday.month();\n        let dateDay = thisSunday.date();\n        console.log(\"Current Week :\",thisSunday , month ,dateDay , thisSunday.day() );\n        data.forEach((e) => {\n          let eDate = moment(e.birthday.dmy, \"DD/MM/YYYY\").year(thisSunday.year());\n          let eMonth = eDate.month();\n          let eDateDate = eDate.date();\n          //console.log( \"Ele Date :\",eDate , eMonth ,eDateDate );\n          if (month === eMonth && (eDateDate >= dateDay && eDateDate < (dateDay + 7))) {\n            match = true;\n            switch (eDate.day()) {\n              case 0: this.setState({ sun: [...this.state.sun, e] }); break;\n              case 1: this.setState({ mon: [...this.state.mon, e] }); break;\n              case 2: this.setState({ tue: [...this.state.tue, e] }); break;\n              case 3: this.setState({ wed: [...this.state.wed, e] }); break;\n              case 4: this.setState({ thu: [...this.state.thu, e] }); break;\n              case 5: this.setState({ fri: [...this.state.fri, e] }); break;\n              case 6: this.setState({ sat: [...this.state.sat, e] }); break;\n              default:\n                break;\n            }\n          }\n        });\n      }).then(()=>{\n        alert(\"Math :\"+ match);\n        console.log(this.state);\n      });\n\n     \n  }\n\n  render() {\n    return (\n      <div className=\"container text-center col-sm-12\">\n        <table className=\"table table-border\">\n          <thead>\n            <tr>\n              <th width=\"14%\">SUN</th>\n              <th width=\"14%\">MON</th>\n              <th width=\"14%\">THU</th>\n              <th width=\"14%\">WED</th>\n              <th width=\"14%\">THU</th>\n              <th width=\"14%\">FRI</th>\n              <th width=\"14%\">SAT</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>\n                {this.state.sun.map((el, i) => (\n                  <Card {...el} key={i}></Card>\n                ))}\n              </td>\n              <td>\n                {this.state.mon.map((el, i) => (\n                  <Card {...el}  key={i}></Card>\n                ))}\n              </td>\n              <td>  {this.state.tue.map((el, i) => (\n                <Card {...el}  key={i}></Card>\n              ))}</td>\n              <td>  {this.state.wed.map((el, i) => (\n                <Card {...el} key={i}></Card>\n              ))}</td>\n              <td>  {this.state.thu.map((el, i) => (\n                <Card {...el} key={i}></Card>\n              ))}</td>\n              <td>  {this.state.fri.map((el, i) => (\n                <Card {...el} key={i}></Card>\n              ))}</td>\n              <td>\n                {this.state.sat.map((el, i) => (\n                  <Card {...el} key={i}></Card>\n                ))}\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
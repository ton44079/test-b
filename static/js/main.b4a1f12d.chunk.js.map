{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","data","react_default","a","createElement","className","src","photo","alt","name","surname","App","state","sun","mon","tue","wed","thu","fri","sat","_this2","this","fetch","then","response","json","forEach","e","moment","birthday","dmy","day","setState","Object","toConsumableArray","concat","console","log","width","map","el","i","App_Card","assign","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b4a1f12d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport moment from 'moment';\r\n\r\nconst Card = (data) => {\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <img src={data.photo} alt={data.name} className=\"card-img-top\" />\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">{data.name||data.surname}</h5>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nclass App extends Component {\r\n  state = {\r\n    sun: [],\r\n    mon: [],\r\n    tue: [],\r\n    wed: [],\r\n    thu: [],\r\n    fri: [],\r\n    sat: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    // let match = false;\r\n\r\n   // alert(\"Fetch API\");\r\n    fetch('https://uinames.com/api/?ext&amount=25')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        // alert(\"Fetch Completed.\");\r\n        // var thisSunday = moment().day(0);\r\n        // var month = thisSunday.month();\r\n        // var dateDay = thisSunday.date();\r\n        // console.log(\"Current Week :\",thisSunday , month ,dateDay , thisSunday.day() );\r\n        data.forEach((e) => {\r\n          let eDate = moment(e.birthday.dmy, \"DD/MM/YYYY\");//.year(thisSunday.year());\r\n          //  let eMonth = eDate.month();\r\n          // let eDateDate = eDate.date();\r\n          //console.log( \"Ele Date :\",eDate , eMonth ,eDateDate );\r\n          // if (month === eMonth && (eDateDate >= dateDay && eDateDate < (dateDay + 7))) {\r\n          //  match = true;\r\n          switch (eDate.day()) {\r\n            case 0: this.setState({ sun: [...this.state.sun, e] }); break;\r\n            case 1: this.setState({ mon: [...this.state.mon, e] }); break;\r\n            case 2: this.setState({ tue: [...this.state.tue, e] }); break;\r\n            case 3: this.setState({ wed: [...this.state.wed, e] }); break;\r\n            case 4: this.setState({ thu: [...this.state.thu, e] }); break;\r\n            case 5: this.setState({ fri: [...this.state.fri, e] }); break;\r\n            case 6: this.setState({ sat: [...this.state.sat, e] }); break;\r\n            default:\r\n              break;\r\n          }\r\n          // }\r\n        });\r\n      }).then(() => {\r\n        //alert(\"Math :\"+ match);\r\n        console.log(this.state);\r\n      });\r\n\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container text-center col-sm-12\">\r\n        <table className=\"table table-border\">\r\n          <thead>\r\n            <tr>\r\n              <th width=\"14%\">SUN</th>\r\n              <th width=\"14%\">MON</th>\r\n              <th width=\"14%\">THU</th>\r\n              <th width=\"14%\">WED</th>\r\n              <th width=\"14%\">THU</th>\r\n              <th width=\"14%\">FRI</th>\r\n              <th width=\"14%\">SAT</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>\r\n                {this.state.sun.map((el, i) => (\r\n                  <Card {...el} key={i}></Card>\r\n                ))}\r\n              </td>\r\n              <td>\r\n                {this.state.mon.map((el, i) => (\r\n                  <Card {...el} key={i}></Card>\r\n                ))}\r\n              </td>\r\n              <td>  {this.state.tue.map((el, i) => (\r\n                <Card {...el} key={i}></Card>\r\n              ))}</td>\r\n              <td>  {this.state.wed.map((el, i) => (\r\n                <Card {...el} key={i}></Card>\r\n              ))}</td>\r\n              <td>  {this.state.thu.map((el, i) => (\r\n                <Card {...el} key={i}></Card>\r\n              ))}</td>\r\n              <td>  {this.state.fri.map((el, i) => (\r\n                <Card {...el} key={i}></Card>\r\n              ))}</td>\r\n              <td>\r\n                {this.state.sat.map((el, i) => (\r\n                  <Card {...el} key={i}></Card>\r\n                ))}\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}